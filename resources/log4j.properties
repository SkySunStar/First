#Java特性文件做为配置文件的方法:

#log4j包含三个组件,分别是 Loggers(记录器)、Appenders(输出源)、Layouts(日志布局)。
#	分别简单理解为"日志类别"、"日志要输出的地方"和"日志以何种形式输出"

#(1)配置根Logger，其语法为：
#	log4j.rootLogger = [level], appenderName1, appenderName2, …
#level: 是日志记录的优先级，分为OFF、FATAL、ERROR、WARN、INFO、DEBUG、ALL或者您定义的级别。
#	Log4j建议只使用四个级别，优先级从高到低分别是ERROR、WARN、INFO、DEBUG。
#appenderName: 就是指定日志信息输出到哪个地方。
log4j.rootLogger=debug,output
#,write

#在Log4j中，日志信息通过Appender组件输出到目的地，一个Appender实例就代表了一个目的地。
#	一个记录器(Logger)可以拥有多个Appender。
#其语法表示为：
#	org.apache.log4j.ConsoleAppender --> 控制台
#	org.apache.log4j.FileAppender --> 文件
#	org.apache.log4j.DailyRollingFileAppender --> 按照指定的日期或时间频率滚动产生日志文件
#	org.apache.log4j.RollingFileAppender --> 当文件到达一定长度时，备份文件即产生一个新的文件
#	org.apache.log4j.WriterAppender --> 将日志信息以流格式发送到任意指定的地方
#配置时使用方式为：
#	log4j.appender.appenderName = fully.qualified.name.of.appender.class
#	log4j.appender.appenderName.option1 = value1
#	......
#	log4j.appender.appenderName.optionN = valueN
log4j.appender.output=org.apache.log4j.ConsoleAppender
log4j.appender.output.layout=org.apache.log4j.PatternLayout
log4j.appender.output.Encoding=UTF-8

#Layout组件负责格式化输出日志信息，一个Appender只能有一个Layout组件。
#其语法表示为：
#	org.apache.log4j.HTMLLayout --> 以HTML网页表格的形式输出日志信息(.html)
#	org.apache.log4j.PatternLayout --> 程序员根据一系列的格式化标签，类似C中的printf()函数的输出
#	org.apache.log4j.SimpleLayout --> 由日志级别 + “-” + 消息 组成 例如：DEBUG–错误
#	org.apache.log4j.TTCCLayout --> 由时间(time)，线程(thread)，类别(category)，和嵌套的上下文(context)信息组成。(TTCC有上述四个英文单词组成)(.log)
#配置时使用方式为：
#	log4j.appender.appenderName.layout =fully.qualified.name.of.layout.class
#	log4j.appender.appenderName.layout.option1 = value1
#	......
#	log4j.appender.appenderName.layout.optionN = valueN
log4j.appender.output.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss} %5p [%t] (%F:%L) - %m%n 

#log4j.appender.write=org.apache.log4j.RollingFileAppender
#log4j.appender.write.File=example20180910.log
#log4j.appender.write.MaxFileSize=100KB
#log4j.appender.write.MaxBackupIndex=1
#log4j.appender.write.layout=org.apache.log4j.PatternLayout
#log4j.appender.write.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss} %5p [%t] (%F:%L) - %m%n 
#PatternLayout选项:
#	ConversionPattern=%m%n: 指定怎样格式化指定的消息。
#这里需要说明的就是日志信息格式中几个符号所代表的含义：
#	－X号: X信息输出时左对齐；
#	%p: 输出日志信息优先级，即DEBUG，INFO，WARN，ERROR，FATAL,
#	%d: 输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyyy MMM dd HH:mm:ss,SSS}输出类似：2002年10月18日 22：10：28，921
#	%r: 输出自应用启动到输出该log信息耗费的毫秒数
#	%c: 输出日志信息所属的类目，通常就是所在类的全名
#	%t: 输出产生该日志事件的线程名
#	%l: 输出日志事件的发生位置，相当于%C.%M(%F:%L)的组合,包括类目名、发生的线程，以及在代码中的行数。举例：Testlog4.main(TestLog4.java:10)
#	%x: 输出和当前线程相关联的NDC(嵌套诊断环境),尤其用到像java servlets这样的多客户多线程的应用中。
#	%%: 输出一个"%"字符
#	%F: 输出日志消息产生时所在的文件名称
#	%L: 输出代码中的行号
#	%m: 输出代码中指定的消息,产生的日志具体信息
#	%n: 输出一个回车换行符，Windows平台为"/r/n"，Unix平台为"/n"输出日志信息换行
#可以在%与模式字符之间加上修饰符来控制其最小宽度、最大宽度、和文本的对齐方式。如：
#	1)%20c：指定输出category的名称，最小的宽度是20，如果category的名称小于20的话，默认的情况下右对齐。
#	2)%-20c:指定输出category的名称，最小的宽度是20，如果category的名称小于20的话，"-"号指定左对齐。
#	3)%.30c:指定输出category的名称，最大的宽度是30，如果category的名称大于30的话，就会将左边多出的字符截掉，但小于30的话也不会有空格。 
#	4)%20.30c:如果category的名称小于20就补空格，并且右对齐，如果其名称长于30字符，就从左边交远销出的字符截掉。